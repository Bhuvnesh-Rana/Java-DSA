Linear search is used to search a key element from multiple elements. Linear search is less used today because it is slower than binary search and hashing.
It travesrse the entire array to fing the targer element.(N comparisons -> N(no. of elements.))
Algorithm:

    Step 1: Traverse the array
    Step 2: Match the key element with array element
    Step 3: If key element is found, return the index position of the array element
    Step 4: If key element is not found, return -1


    BEST CASE COMPLEXITY 
    In linear search, the best-case occurs when the search element is present at the first location of the array. So the best-case time complexity of the linear search is O(1). 

    The best-case time complexity of the linear search is O(1).

    AVERAGE CASE COMPLEXITY 
    In linear search average case occurs when the search element is present at the random location of the array.so the average case time complexity of the linear search is O(1).
    The average case time complexity of the linear search is O(n).

    WORST-CASE COMPLEXITY
    In linear search, the worst case occurs when the search element is present at the last location of the array So the worst-case time complexity of the linear search is O(1).In the worst case in if the search element is not present in the given array then we need to traverse the entire array to search element. So the worst-case time complexity of the linear search is O(n).
    The worst-case time complexity of the linear search is O(n).

SPACE COMPLEXITY

The SPACE complexity of the linear search is O(1)